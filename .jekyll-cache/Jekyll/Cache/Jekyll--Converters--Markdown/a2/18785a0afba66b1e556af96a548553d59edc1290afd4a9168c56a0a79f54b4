I":n<p>As you can see, if you using django-rest-framework, you will found many different response format.
This middleware to solve all of these problems with Standard API Response.</p>

<p>All HTTP Response status stored into json response, not in HTTP Status (because mobile application,
like android canâ€™t fetch the response body when HTTP Status &gt;= 400).</p>

<h3 id="middlewarepy"><code class="language-plaintext highlighter-rouge">middleware.py</code></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">copy</span>

<span class="kn">from</span> <span class="nn">django.utils.deprecation</span> <span class="kn">import</span> <span class="n">MiddlewareMixin</span>
<span class="kn">from</span> <span class="nn">django.utils.translation</span> <span class="kn">import</span> <span class="n">ugettext_lazy</span> <span class="k">as</span> <span class="n">_</span>
<span class="kn">from</span> <span class="nn">django.core.serializers.json</span> <span class="kn">import</span> <span class="n">DjangoJSONEncoder</span>

<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">status</span>


<span class="k">class</span> <span class="nc">BaseAPIResponseMiddleware</span><span class="p">(</span><span class="n">MiddlewareMixin</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">render_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="s">"""
        function to fixed the response API following with this format:

        [1] success single
            {
             "status": 200,
             "success": true,
             "message": "The success message",
             "result": {}
            }

        [2] success list
            {
               "status": 200,
               "success": true,
               "message": null,
               "results": [],

               "count": 2,
               "page_size": 5,
               "current_page": 1,
               "next": "/api/post/?page=2&amp;search=a",
               "previous": null
            }

        [3] failed
            {
               "status": 400,
               "success": false,
               "message": "The failed message",
               "result": {}
            }
        """</span>
        <span class="n">default_response_keys</span> <span class="o">=</span> <span class="p">(</span><span class="s">'status'</span><span class="p">,</span> <span class="s">'status_http'</span><span class="p">,</span> <span class="s">'detail'</span><span class="p">,</span> <span class="s">'message'</span><span class="p">,</span>
                                 <span class="s">'success'</span><span class="p">,</span> <span class="s">'non_field_errors'</span><span class="p">,</span> <span class="s">'count'</span><span class="p">,</span>
                                 <span class="s">'page_size'</span><span class="p">,</span> <span class="s">'current_page'</span><span class="p">,</span> <span class="s">'next'</span><span class="p">,</span>
                                 <span class="s">'previous'</span><span class="p">,</span> <span class="s">'result'</span><span class="p">,</span> <span class="s">'results'</span><span class="p">)</span>
        <span class="n">response_data</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>

        <span class="c1"># setup default result if doesn't exist
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">([</span><span class="s">'result'</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">,</span> <span class="s">'results'</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">]):</span>
            <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'result'</span><span class="p">:</span> <span class="p">{}})</span>

        <span class="c1"># setup default message into response data
</span>        <span class="k">if</span> <span class="s">'message'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">:</span>
            <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>

        <span class="c1"># store the status_code into response data
</span>        <span class="k">if</span> <span class="s">'status'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">:</span>
            <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'status'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">})</span>

        <span class="c1"># store the status_http into response data
</span>        <span class="k">if</span> <span class="s">'status_http'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">:</span>
            <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'status_http'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">})</span>

        <span class="c1"># updating the response message
</span>        <span class="k">if</span> <span class="s">'detail'</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">:</span>
            <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="n">response_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'detail'</span><span class="p">)})</span>
            <span class="k">del</span> <span class="n">response_data</span><span class="p">[</span><span class="s">'detail'</span><span class="p">]</span>

        <span class="k">elif</span> <span class="s">'non_field_errors'</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">:</span>
            <span class="n">response_errors</span> <span class="o">=</span> <span class="s">'&lt;br /&gt;'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">response_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'non_field_errors'</span><span class="p">))</span>
            <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="n">response_errors</span><span class="p">})</span>
            <span class="k">del</span> <span class="n">response_data</span><span class="p">[</span><span class="s">'non_field_errors'</span><span class="p">]</span>

        <span class="c1"># store the success boolean into response data
</span>        <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">&gt;=</span> <span class="mi">400</span><span class="p">:</span>
            <span class="n">response_errors</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">response_errors_keys</span> <span class="o">=</span> <span class="p">[]</span>

            <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
                <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">default_response_keys</span><span class="p">:</span>
                    <span class="n">errors</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">])</span>
                    <span class="n">errors</span> <span class="o">=</span> <span class="s">'%s: %s'</span> <span class="o">%</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">errors</span><span class="p">)</span>
                    <span class="n">response_errors</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">errors</span><span class="p">)</span>
                    <span class="n">response_errors_keys</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">response_errors</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">response_errors</span> <span class="o">=</span> <span class="s">'&lt;br /&gt;'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">response_errors</span><span class="p">)</span>
                <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="n">response_errors</span><span class="p">})</span>

            <span class="c1"># deleting the errors in the field keys.
</span>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">response_errors_keys</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">response_data</span><span class="p">.</span><span class="n">pop</span><span class="p">,</span> <span class="n">response_errors_keys</span><span class="p">))</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="n">response_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'message'</span><span class="p">):</span>
                <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="n">_</span><span class="p">(</span><span class="s">'Failed'</span><span class="p">)})</span>

            <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'success'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
                                  <span class="s">'status_http'</span><span class="p">:</span> <span class="n">status</span><span class="p">.</span><span class="n">HTTP_200_OK</span><span class="p">})</span>

        <span class="k">elif</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">response_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'message'</span><span class="p">):</span>
                <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="n">_</span><span class="p">(</span><span class="s">'Success'</span><span class="p">)})</span>

            <span class="k">if</span> <span class="s">'success'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">:</span>
                <span class="n">response_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="s">'success'</span><span class="p">:</span> <span class="bp">True</span><span class="p">})</span>

        <span class="k">return</span> <span class="n">response_data</span>

    <span class="k">def</span> <span class="nf">process_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="c1"># use default response if it setup.
</span>        <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'Use-Default-Response'</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">response</span>

        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="s">'data'</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">response_data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">render_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
                <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">=</span> <span class="n">response_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'status_http'</span><span class="p">)</span>

                <span class="k">if</span> <span class="s">'status_http'</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">:</span>
                    <span class="k">del</span> <span class="n">response_data</span><span class="p">[</span><span class="s">'status_http'</span><span class="p">]</span>

                <span class="n">response</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">response_data</span>
                <span class="n">response</span><span class="p">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">,</span> <span class="n">cls</span><span class="o">=</span><span class="n">DjangoJSONEncoder</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>

        <span class="c1"># handle error response but without `response.data`
</span>        <span class="c1"># this error response specific for "Server Error" mode.
</span>        <span class="n">response_format</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'Response-Format'</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">&gt;=</span> <span class="mi">500</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">response_format</span> <span class="o">==</span> <span class="s">'application/json'</span><span class="p">):</span>
            <span class="n">response_data</span> <span class="o">=</span> <span class="p">{</span><span class="s">'success'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">'result'</span><span class="p">:</span> <span class="p">{},</span>
                             <span class="s">'status'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">,</span>
                             <span class="s">'message'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">reason_phrase</span><span class="p">}</span>
            <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">=</span> <span class="mi">200</span>
            <span class="n">response</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">response_data</span>
            <span class="n">response</span><span class="p">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">,</span> <span class="n">cls</span><span class="o">=</span><span class="n">DjangoJSONEncoder</span><span class="p">)</span>
            <span class="n">response</span><span class="p">[</span><span class="s">'Content-Type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'application/json'</span>

        <span class="k">return</span> <span class="n">response</span>
</code></pre></div></div>

<h3 id="paginatorpy"><code class="language-plaintext highlighter-rouge">paginator.py</code></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>

<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>

<span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>
<span class="kn">from</span> <span class="nn">django.utils.translation</span> <span class="kn">import</span> <span class="n">ugettext_lazy</span> <span class="k">as</span> <span class="n">_</span>

<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">status</span>
<span class="kn">from</span> <span class="nn">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span>
<span class="kn">from</span> <span class="nn">rest_framework.pagination</span> <span class="kn">import</span> <span class="p">(</span><span class="n">PageNumberPagination</span><span class="p">,</span> <span class="n">LimitOffsetPagination</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">RestPagination</span><span class="p">(</span><span class="n">PageNumberPagination</span><span class="p">,</span> <span class="n">LimitOffsetPagination</span><span class="p">):</span>
    <span class="s">"""
    class FoobarPagiantion(RestPagination):
        page_size = 10

    class FoobarView(ListAPIView):
        pagination_class = FoobarPagiantion
    """</span>

    <span class="k">def</span> <span class="nf">paginate_queryset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">queryset</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">view</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">limit</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">query_params</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'limit'</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">limit</span><span class="p">).</span><span class="n">isdigit</span><span class="p">():</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">page_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">().</span><span class="n">paginate_queryset</span><span class="p">(</span><span class="n">queryset</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">view</span><span class="o">=</span><span class="n">view</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_paginated_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">results</span><span class="p">):</span>
        <span class="n">next_link</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_next_link</span><span class="p">()</span> <span class="ow">or</span> <span class="s">''</span>
        <span class="n">prev_link</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_previous_link</span><span class="p">()</span> <span class="ow">or</span> <span class="s">''</span>

        <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">settings</span><span class="p">,</span> <span class="s">'USE_SSL'</span><span class="p">,</span> <span class="bp">False</span><span class="p">):</span>
            <span class="n">next_link</span> <span class="o">=</span> <span class="n">next_link</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'http:'</span><span class="p">,</span> <span class="s">'https:'</span><span class="p">)</span>
            <span class="n">prev_link</span> <span class="o">=</span> <span class="n">prev_link</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'http:'</span><span class="p">,</span> <span class="s">'https:'</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">OrderedDict</span><span class="p">([</span>
            <span class="p">(</span><span class="s">'count'</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">page</span><span class="p">.</span><span class="n">paginator</span><span class="p">.</span><span class="n">count</span><span class="p">),</span>
            <span class="p">(</span><span class="s">'page_size'</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">page_size</span><span class="p">),</span>
            <span class="p">(</span><span class="s">'current_page'</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">page</span><span class="p">.</span><span class="n">number</span><span class="p">),</span>
            <span class="p">(</span><span class="s">'next'</span><span class="p">,</span> <span class="n">next_link</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">),</span>
            <span class="p">(</span><span class="s">'previous'</span><span class="p">,</span> <span class="n">prev_link</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">),</span>
            <span class="p">(</span><span class="s">'status'</span><span class="p">,</span> <span class="n">status</span><span class="p">.</span><span class="n">HTTP_200_OK</span><span class="p">),</span>
            <span class="p">(</span><span class="s">'message'</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">'Success'</span><span class="p">)),</span>
            <span class="p">(</span><span class="s">'success'</span><span class="p">,</span> <span class="bp">True</span><span class="p">),</span>
            <span class="p">(</span><span class="s">'results'</span><span class="p">,</span> <span class="n">results</span><span class="p">)</span>
        <span class="p">]))</span>
</code></pre></div></div>

<hr />

<p>When you want to implement for specific feature by using default response, e.g: I want to use it in my webhook,
then you can also use the wrapper to do it. For example in your <code class="language-plaintext highlighter-rouge">wrappers.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">use_default_response</span><span class="p">(</span><span class="n">view_func</span><span class="p">):</span>
    <span class="s">"""
    function wrapper to rollback `BaseAPIResponseMiddleware`
    into default response middleware.
    """</span>
    <span class="k">def</span> <span class="nf">wrapper_function</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">request</span><span class="p">.</span><span class="n">META</span><span class="p">[</span><span class="s">'HTTP_USE_DEFAULT_RESPONSE'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="n">view_func</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper_function</span>
</code></pre></div></div>

<p>then, in your specific view;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">path.to.wrappers</span> <span class="kn">import</span> <span class="n">use_default_response</span>
<span class="kn">from</span> <span class="nn">django.utils.decorators</span> <span class="kn">import</span> <span class="n">method_decorator</span>


<span class="k">class</span> <span class="nc">WebhookView</span><span class="p">(</span><span class="n">APIView</span><span class="p">):</span>

    <span class="o">@</span><span class="n">method_decorator</span><span class="p">(</span><span class="n">use_default_response</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">pass</span>
</code></pre></div></div>
:ET