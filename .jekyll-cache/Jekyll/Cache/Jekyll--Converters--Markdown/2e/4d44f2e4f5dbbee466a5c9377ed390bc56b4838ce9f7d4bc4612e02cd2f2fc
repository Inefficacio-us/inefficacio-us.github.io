I"A2<p>Previously, the Django has <a href="https://docs.djangoproject.com/en/dev/ref/middleware/#x-xss-protection-1-mode-block">X-XSS-Protection: 1; mode=block</a> to handle this case. Some browsers have the ability to block content that appears to be an XSS attack. They work by looking for JavaScript content in the GET or POST parameters of a page. If the JavaScript is replayed in the server’s response, the page is blocked from rendering and an error page is shown instead.</p>

<p>The <code class="language-plaintext highlighter-rouge">X-XSS-Protection header</code> is used to control the operation of the XSS filter.</p>

<p>To enable the XSS filter in the browser, and force it to always block suspected XSS attacks, you can pass the <code class="language-plaintext highlighter-rouge">X-XSS-Protection: 1; mode=block</code> header. SecurityMiddleware will do this for all responses if the <code class="language-plaintext highlighter-rouge">SECURE_BROWSER_XSS_FILTER</code> setting is <code class="language-plaintext highlighter-rouge">True</code>.</p>

<hr />

<p>The solution above can’t handle the modified request body from attacker. So, to handle this case, I have two methods:</p>

<h4 id="1-by-using-strip_tags">1. By using <a href="https://docs.djangoproject.com/en/dev/ref/utils/#django.utils.html.strip_tags"><code class="language-plaintext highlighter-rouge">strip_tags</code></a></h4>

<p>The <code class="language-plaintext highlighter-rouge">XSSModelCleaner</code> below to handle any text fields to clean the all <code class="language-plaintext highlighter-rouge">html</code> &amp; <code class="language-plaintext highlighter-rouge">script</code> tags. For example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.utils.html</span> <span class="kn">import</span> <span class="n">strip_tags</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">strip_tags</span><span class="p">(</span><span class="s">'&lt;p&gt;this is a title&lt;/p&gt;'</span><span class="p">)</span>
<span class="s">'this is a title'</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p>So, when your user filled the <code class="language-plaintext highlighter-rouge">title</code> like this <code class="language-plaintext highlighter-rouge">'&lt;p&gt;this is a title&lt;/p&gt;'</code> it will cleaned as <code class="language-plaintext highlighter-rouge">'this is a title'</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">title</span> <span class="o">=</span> <span class="s">'&lt;p&gt;this is a title&lt;/p&gt;'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">post</span> <span class="o">=</span> <span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="p">...)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">post</span><span class="p">.</span><span class="n">title</span>
<span class="s">'this is a title'</span>
</code></pre></div></div>

<p>And this class mixin below to handle it all fields;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.utils.html</span> <span class="kn">import</span> <span class="n">strip_tags</span>


<span class="k">class</span> <span class="nc">XSSModelCleaner</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s">"""
    class to handle the xss injection
    before it save into database by using `strip_tags`.

    class ModelName(XSSModelCleaner, models.Model):
        pass
    """</span>
    <span class="n">excluded_xss_model_fields</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="c1"># handle the xss injection
</span>        <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">_meta</span><span class="p">.</span><span class="n">fields</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">field</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">excluded_xss_model_fields</span><span class="p">:</span>
                <span class="n">value</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">field</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="n">value_clean</span> <span class="o">=</span> <span class="n">strip_tags</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
                    <span class="nb">setattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">field</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">value_clean</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">().</span><span class="n">save</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="1-by-using-custom-contenttext-replacer">1. By using custom content/text replacer.</h4>

<p>And in this case, we have a different functionality. For example when the field is as <code class="language-plaintext highlighter-rouge">models.TextField</code> or <code class="language-plaintext highlighter-rouge">RichTextField</code>.
So, we need to allow the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> tags, but not including the common XSS tags, like: <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> &amp; <code class="language-plaintext highlighter-rouge">alert</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">re</span>

<span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>


<span class="k">def</span> <span class="nf">xss_cleaner</span><span class="p">(</span><span class="n">content</span><span class="p">):</span>
    <span class="s">"""
    function to clear the content with fixed text.
    you can also use this function to handle the models.

    :param `content` is string text from text editor.
    :usage example;


    from siap_app.utils.cleaner import xss_cleaner

    class Post(models.Model):
        description = models.TextField()

        def save(self, *args, **kwargs):

            # do something like this
            self.description = xss_cleaner(self.description)

            return super().save(*args, **kwargs)
    """</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">content</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="c1"># remove the xss injection
</span>    <span class="n">content</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s">"&lt;script(.*)script&gt;"</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s">"alert(.*)\)"</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s">"javascript:"</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">content</span>
</code></pre></div></div>

<p><strong>Don’t want to save it in the models, only inside the <code class="language-plaintext highlighter-rouge">forms</code>?</strong>, no worry just like this;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">siap_app.utils.cleaner</span> <span class="kn">import</span> <span class="n">xss_cleaner</span>


<span class="k">class</span> <span class="nc">PostForm</span><span class="p">(</span><span class="n">forms</span><span class="p">.</span><span class="n">ModelForm</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">cleaned_data</span> <span class="o">=</span> <span class="nb">super</span><span class="p">().</span><span class="n">clean</span><span class="p">()</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="n">cleaned_data</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="n">v</span> <span class="o">=</span> <span class="n">xss_cleaner</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
                <span class="n">cleaned_data</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">cleaned_data</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Post</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>
</code></pre></div></div>

<p>or if you want speficif field.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PostForm</span><span class="p">(</span><span class="n">forms</span><span class="p">.</span><span class="n">ModelForm</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">clean_description</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">description</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">description</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">xss_cleaner</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">description</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Post</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>
</code></pre></div></div>
:ET